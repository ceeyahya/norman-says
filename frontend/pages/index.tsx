import { useState } from 'react';
import Head from 'next/head';
import type { NextPage } from 'next';
import axios from 'axios';
import { useForm, SubmitHandler } from 'react-hook-form';

import Navbar from 'components/Navbar';
import Prediction from 'components/Prediction';

type Headline = {
	text: string;
};

const Home: NextPage = () => {
	const {
		register,
		handleSubmit,
		formState,
		formState: { errors },
	} = useForm<Headline>({ mode: 'onChange' });
	const [loading, setLoading] = useState<boolean>(false);
	const [prediction, setPrediction] = useState<1 | 0 | undefined>(undefined);

	const onSubmit: SubmitHandler<Headline> = async (data) => {
		setLoading(true);
		const res = await axios.post(`${process.env.NEXT_PUBLIC_API_URL}/predict`, {
			text: data.text,
		});
		setPrediction(res.data.prediction[0]);
		setLoading(false);
	};

	return (
		<div className='dark:bg-black relative'>
			<Head>
				<title>Norman Says - Clickbait Detector</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='https://fav.farm/ðŸ¦–' />
			</Head>

			<Navbar />

			<main className='py-0 sm:py-12 space-y-12'>
				<div className='max-w-7xl mx-auto px-4 space-y-2'>
					<h1 className='max-w-2xl text-2xl md:text-3xl font-serif'>
						Norman is a good dino, he'd love to save you from reading a
						Clickbait article. Just give him a{' '}
						<span className='italic'>headline</span> and let him do his thing !
					</h1>
				</div>
				<div className='grid grid-cols-1 sm:grid-cols-2'>
					<form
						className='relative hide-submit'
						onSubmit={handleSubmit(onSubmit)}>
						<div className='dark:border-zinc-700 dark:focus-within:border-white focus-within:border-b-2 border-b-4 border-gray-300 focus-within:border-black w-full h-96'>
							<textarea
								onFocus={(evt) => evt.target.select()}
								style={{ resize: 'none' }}
								placeholder="Not sure if you should read an article ? I'm sure I can tell you if it's clickbait or not."
								className='bg-gray-100 dark:bg-zinc-900 w-full h-full dark:focus:border-white dark:placeholder-zinc-700 border-0 border-b-2 border-transparent px-4 py-4 font-serif text-3xl focus:ring-0 placeholder:font-serif focus:border-black placeholder:text-zinc-500/50'
								{...register('text', { required: true })}
							/>
						</div>
						<label className='bg-black text-white hover:bg-gray-100 border-2 border-transparent hover:border-black hover:text-black dark:bg-white dark:text-black dark:hover:bg-zinc-900 dark:hover:text-white dark:hover:border-white transition duration-300 z-50 cursor-pointer absolute bottom-4 right-4 px-2 py-2'>
							<input
								type='submit'
								disabled={
									!formState.isDirty ||
									(formState.isDirty && !formState.isValid)
								}
							/>
							<svg className='h-8 w-8' viewBox='0 0 24 24'>
								<path
									fill='currentColor'
									d='M18 16H8v2H6v-2H4v-2h2v-2h2v2h10V4h2v12h-2zM8 12v-2h2v2H8zm0 6v2h2v-2H8z'></path>
							</svg>
						</label>
					</form>
					<div className='border-l border-gray-300 dark:border-zinc-800 dark:bg-zinc-900 relative bg-gray-100 w-full h-96 px-4 py-4'>
						<div>
							<Prediction prediction={prediction} loading={loading} />
						</div>
						<div className='absolute -bottom-6 sm:-bottom-9 -right-0'>
							<svg
								style={{ display: 'block', transform: 'scale(-1,1)' }}
								className='dark:text-zinc-800 opacity-30 text-zinc-300 h-36 w-36 sm:h-56 sm:w-56'
								viewBox='0 0 24 24'>
								<path
									fill='currentColor'
									d='M6 4h14v2h2v6h-8v2h6v2h-4v2h-2v2H2V8h2V6h2V4zm2 6h2V8H8v2z'></path>
							</svg>
						</div>
					</div>
				</div>
			</main>
		</div>
	);
};

export default Home;
